generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workout {
  id               String             @id @default(uuid())
  userId           String
  name             String
  visibility       Visibility         @default(PRIVATE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  WorkoutExercises WorkoutExercises[]
  WorkoutSessions  WorkoutSession[]
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workouts")
}

model WorkoutExercises {
  id                      String                    @id @default(uuid())
  workoutId               String
  exerciseId              String
  series                  String
  repetitions             String
  weight                  String
  restTime                String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  exercise                Exercise                  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workout                 Workout                   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  WorkoutSessionExercises WorkoutSessionExercises[]

  @@map("workout_exercises")
}

model Exercise {
  id               String             @id @default(uuid())
  muscleGroupId    String
  name             String
  image            String
  videoUrl         String
  description      String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  muscleGroup      MuscleGroup        @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade)
  WorkoutExercises WorkoutExercises[]

  @@map("exercises")
}

model User {
  id              String           @id
  name            String
  avatar          String
  WorkoutSessions WorkoutSession[]
  Workout         Workout[]

  @@map("users")
}

model WorkoutSession {
  id                      String                    @id @default(uuid())
  userId                  String
  workoutId               String
  status                  Status                    @default(NOT_STARTED)
  startedAt               DateTime                  @default(now())
  endedAt                 DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  WorkoutSessionExercises WorkoutSessionExercises[]
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout                 Workout                   @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@map("workout_sessions")
}

model WorkoutSessionExercises {
  id                String           @id @default(uuid())
  workoutSessionId  String
  workoutExerciseId String
  status            Status           @default(NOT_STARTED)
  series            String
  repetitions       String
  weight            String
  restTime          String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  workoutExercise   WorkoutExercises @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  workoutSession    WorkoutSession   @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)

  @@map("workout_session_exercises")
}

model MuscleGroup {
  id          String     @id @default(uuid())
  name        String
  image       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  exercises   Exercise[]

  @@map("muscle_groups")
}

enum Goal {
  WEIGHT_LOSS
  MUSCLE_GAIN
  MAINTENANCE
  ENDURANCE
  GENERAL_FITNESS
  REHABILITATION
  ATHLETIC_PERFORMANCE
  STRESS_RELIEF
  PERFORMANCE
  MOBILITY
  COMPETITION
  ENERGY_BOOST
  STRENGTH
  MUSCLE_DEFINITION
  OUTDOOR_PREP
  MENTAL_HEALTH
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
  ATHLETE
  CASUAL
  REHABILITATION
  SENIOR
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Status {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
  UNCOMPLETED
}
