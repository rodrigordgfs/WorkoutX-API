// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Goal {
  WEIGHT_LOSS
  MUSCLE_GAIN
  MAINTENANCE
  ENDURANCE
  GENERAL_FITNESS
  REHABILITATION
  ATHLETIC_PERFORMANCE
  STRESS_RELIEF
  PERFORMANCE
  MOBILITY
  COMPETITION
  ENERGY_BOOST
  STRENGTH
  MUSCLE_DEFINITION
  OUTDOOR_PREP
  MENTAL_HEALTH
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
  ATHLETE
  CASUAL
  REHABILITATION
  SENIOR
}

enum Visibility {
  PUBLIC
  PRIVATE
}

// model Workout {
//   id             String             @id @default(uuid())
//   userId         String
//   name           String
//   visibility     Visibility         @default(PRIVATE)
//   exercises      WorkoutExercises[]
//   WorkoutSession WorkoutSession[]
//   likes          WorkoutLikes[]
//   createdAt      DateTime           @default(now())
//   updatedAt      DateTime           @updatedAt
//   user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("workouts")
// }

// model WorkoutLikes {
//   id        String   @id @default(uuid())
//   workoutId String
//   userId    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("workout_likes")
// }

// model WorkoutExercises {
//   id                      String                   @id @default(uuid())
//   workoutId               String
//   exerciseId              String
//   series                  String
//   repetitions             String
//   weight                  String
//   restTime                String
//   workoutSessionExercises WorkoutSessionExercise[]
//   createdAt               DateTime                 @default(now())
//   updatedAt               DateTime                 @updatedAt
//   workout                 Workout                  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
//   exercise                Exercise                 @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

//   @@map("workout_exercises")
// }

model Exercise {
  id            String      @id @default(uuid())
  muscleGroupId String
  name          String
  image         String
  videoUrl      String
  description   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  muscleGroup   MuscleGroup @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade)

  @@map("exercises")
}

// model User {
//   id             String           @id
//   name           String
//   avatar         String
//   height         Float?
//   weight         Float?
//   goal           Goal?
//   experience     ExperienceLevel?
//   publicProfile  Boolean          @default(false)
//   workouts       Workout[]
//   createdAt      DateTime         @default(now())
//   updatedAt      DateTime         @updatedAt
//   WorkoutLikes   WorkoutLikes[]
//   WorkoutSession WorkoutSession[]
//   ReportBug      ReportBug[]

//   @@map("users")
// }

// model WorkoutSession {
//   id             String                   @id @default(uuid())
//   userId         String
//   workoutId      String
//   startedAt      DateTime                 @default(now())
//   endedAt        DateTime?
//   endedByService Boolean                  @default(false)
//   user           User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   workout        Workout                  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
//   exercises      WorkoutSessionExercise[]

//   @@map("workout_sessions")
// }

// model WorkoutSessionExercise {
//   id                 String            @id @default(uuid())
//   workoutSessionId   String
//   workoutExercisesId String?
//   completed          Boolean           @default(false)
//   createdAt          DateTime          @default(now())
//   updatedAt          DateTime          @updatedAt
//   workoutSession     WorkoutSession    @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
//   WorkoutExercises   WorkoutExercises? @relation(fields: [workoutExercisesId], references: [id])

//   @@map("workout_session_exercises")
// }

model MuscleGroup {
  id          String     @id @default(uuid())
  name        String
  image       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  exercises   Exercise[]

  @@map("muscle_groups")
}

// model ReportBug {
//   id          String   @id @default(uuid())
//   userId      String
//   title       String
//   description String
//   imageUrl    String
//   resolved    Boolean  @default(false)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("report_bugs")
// }
